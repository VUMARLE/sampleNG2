<?xml version="1.0"?>
<project name="War Build POC" default="export_war_solutions" basedir=".">

	<target name="load_properties">
			<property file="build.properties"/>
	</target>

	<target name="export_war_solutions" depends="load_properties,clean">
			<export-solutions-as-war solutionNames="${solutions_to_export_as_war}" outputDir="${servoy.test.target-exports.war}"/>
			<loadfile property="eclipselog" srcFile="${test.workspace.dir}/.metadata/.log"/>
	</target>

	<!-- Custom task that exports the servoy solution as a war using equinox jar-->
	<macrodef name="export-solutions-as-war">
        <attribute name="solutionNames"/>
        <attribute name="outputDir"/>
    	<sequential>
	        <!-- store path to newest Eclipse launcher JAR in path id 'newest.equinox.launcher.path.id' -->
        	<!-- and turn the path into a property -->
        	<latest_jar pathName="equinox.launcher.jar.location" dir="${servoy_install.developer}/plugins" includes="**/org.eclipse.equinox.launcher*.jar"/>

        	<!-- now we are ready to start the workspace exporter -->
    		<echo level="info" message="Using application_server dir: ${servoy_install.app_server_dir}"/>
    		<echo level="info" message="Using developer          dir: ${servoy_install.developer}"/>
        	<echo level="info" message="Using equinox launcher   jar: ${equinox.launcher.jar.location_property}" />
    		<echo level="info" message="Using pluginLocations   dir: ${servoy_install.developer}/plugins/" />
            <echo level="info" message="Using workspace   dir: ${test.workspace.dir}" />
        	<java   classname="org.eclipse.equinox.launcher.Main"
                	classpathref="equinox.launcher.jar.location"
                	failonerror="true"
					fork="true">
            	<jvmarg value="-Xms40m" />
            	<jvmarg value="-Xmx512m" />
            	<jvmarg value="-XX:MaxPermSize=256M" />
            	<jvmarg value="-Dosgi.configuration.cascaded=false" />
				<!--<jvmarg value="-Dosgi.locking=none" />-->
				<jvmarg value="-Dosgi.logfile=${test.workspace.dir}/log" />
            	<jvmarg value="-Dservoy.application_server.dir=${servoy_install.app_server_dir}" />
            	<!--jvmarg value="-Xdebug" />
            	<jvmarg value="-Xrunjdwp:transport=dt_socket,address=1000,server=y,suspend=y" /-->

            	<arg value="-application" />
            	<arg value="com.servoy.eclipse.exporter.war.application" />

            	<arg value="-data" />
            	<arg value="${test.workspace.dir}" />
            	<arg value="-s" />
            	<arg value="@{solutionNames}" />
            	<arg value="-o" />
            	<arg value="@{outputDir}" />
            	<arg value="-as" />
            	<arg value="${servoy_install.app_server_dir}" />
            	<arg value="-dbi" />
        		<arg value="-pluginLocations" />
				<arg value="./plugins" />
				<!--<arg value="-consoleLog" />-->
                <!--<arg value="-p" />
                <arg value="${servoy_test_properties}" />-->
            	<!-- add here any of the optional arguments supported by the exporter; see 'export -help' for more info; for example: -->
            	<!--<arg value="-help" />-->
            	<arg value="-verbose" />
				<!--<arg value="-ie" /> -->
        	</java>
    	</sequential>
    </macrodef>	
	<macrodef name="latest_jar">
        <attribute name="pathName"/>
        <attribute name="propertyName" default="@{pathName}_property"/>
        <attribute name="dir"/>
        <attribute name="includes"/>
        <sequential>
            <!-- store path to newest JAR -->
            <path id="@{pathName}">
                <first count="1">
                    <sort>
                        <fileset dir="@{dir}" includes="@{includes}" />
                        <reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
                            <date />
                        </reverse>
                    </sort>
                </first>
            </path>

            <!-- create a property as well -->
           <property name="@{propertyName}" refid="@{pathName}" />
       </sequential>
    </macrodef>
	
	<target name="clean">
    	<!-- clean exports -->
        <echo level="verbose">
            *** Cleaning exports ***
        </echo>
        <delete file="servoy_log.txt" quiet="true"/> <!-- exporter produces this -->
        <!-- also delete the workspace log file -->
        <delete failonerror="false" file="${test.workspace.dir}/.metadata/.log" quiet="true"/>
		<!-- also delete the log file as it is published as an artifact after each jenkins build -->
		<delete file="${servoy_install.app_server_dir}/servoy_log.txt" quiet="true"/>
    </target>
</project>
